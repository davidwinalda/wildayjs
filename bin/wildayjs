#!/usr/bin/env node
const { showHelp, errors } = require("../lib/utils/chalkUtils");
const ModelGenerator = require("../lib/models/modelGenerator");
const ControllerGenerator = require("../lib/controllers/controllerGenerator");
const {
  generateMigration,
  applyMigrations,
  startConsole,
  initDatabase,
  dbStatus,
  newApp,
} = require("../index");
const { program } = require("commander");
const path = require("path");

// Read version from package.json
const packageJson = require(path.join(__dirname, "..", "package.json"));

program
  .version(packageJson.version)
  .description("WildayJS - A Full-Stack JavaScript Web Framework");

// New app command
program
  .command("new <app-name>")
  .description("Create a new WildayJS application")
  .action((appName) => {
    if (!appName) {
      errors.missingArgument("app name");
      process.exit(1);
    }
    newApp(appName);
  });

// Database commands
program
  .command("db:init")
  .description("Initialize the database")
  .action(() => initDatabase());

program
  .command("db:status")
  .description("Show database migration status")
  .action(() => dbStatus());

// Generate commands
program
  .command("generate:controller <name> [actions...]")
  .description("Generate a new controller")
  .option("--api", "Generate an API controller")
  .option("--skip-views", "Skip generating views")
  .option("--skip-routes", "Skip adding routes")
  .action((name, actions, options) => {
    if (!name) {
      console.error("Controller name is required");
      process.exit(1);
    }
    const generator = new ControllerGenerator(name, actions, options);
    generator.generate();
  });

program
  .command("generate:model <name> [attributes...]")
  .description("Generate a new model")
  .action((name, attributes) => {
    if (!name) {
      console.error("Model name is required");
      process.exit(1);
    }
    const generator = new ModelGenerator(name, attributes);
    generator.generate();
  });

program
  .command("generate:migration <name> [columns...]")
  .description("Generate a new migration")
  .action((name, columns) => {
    if (!name) {
      errors.migrationNameRequired();
      process.exit(1);
    }

    const validNamePattern = /^(Create|Add\w+To|Change\w+In|Remove\w+From)\w+$/;
    if (!validNamePattern.test(name)) {
      errors.invalidMigrationFormat();
      process.exit(1);
    }

    if (name.startsWith("Create") && (!columns || columns.length === 0)) {
      errors.columnsRequired();
      process.exit(1);
    }

    generateMigration(name, columns);
  });

// Migration commands
program
  .command("db:migrate")
  .description("Run pending migrations")
  .action(() => applyMigrations());

program
  .command("db:rollback")
  .description("Rollback migrations")
  .option("--step <number>", "Number of migrations to rollback", "1")
  .action((options) => {
    const steps = parseInt(options.step, 10);
    if (isNaN(steps) || steps < 1) {
      errors.invalidStepNumber();
      process.exit(1);
    }
    applyMigrations({ command: "rollback", steps });
  });

program
  .command("db:migrate:up [version]")
  .description("Run a specific migration up")
  .action((version) => {
    if (!version || !/^\d{14}$/.test(version)) {
      errors.invalidVersion();
      process.exit(1);
    }
    applyMigrations({ command: "migrate:up", version });
  });

program
  .command("db:migrate:down [version]")
  .description("Run a specific migration down")
  .action((version) => {
    if (!version || !/^\d{14}$/.test(version)) {
      errors.invalidVersion();
      process.exit(1);
    }
    applyMigrations({ command: "migrate:down", version });
  });

program
  .command("db:migrate:reset")
  .description("Reset database by running all migrations down and up")
  .action(() => applyMigrations({ reset: true }));

program
  .command("console")
  .description("Start WildayJS console")
  .action(() => startConsole());

// Help command
program
  .command("help")
  .description("Display help information")
  .action(() => showHelp());

program.parse(process.argv);

// Show help if no arguments provided
if (!process.argv.slice(2).length) {
  program.outputHelp();
}
